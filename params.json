{"name":"Bindie","tagline":"A quick way to bind model changes to a view","body":"# bindie\r\n\r\n** CommonJS/Browserified simple data view binding, without magic **\r\n\r\nBindie maps UI elements to a bindie object. This is a quick and simple vanilla JS way to data bind element. \r\n\r\nWhen paired with ajax forms (check out  [formie](http://npmjs.org/package/formie)), provides a comprehensive data-binding ui framework without the baggage of a full framework.</p>\r\n\r\n [API Documenation](https://github.com/yawetse/bindie/blob/master/doc/api.md)\r\n\r\n## Example\r\n\r\nCheck out `example/index.html`, the example javascript for the example page is `resources/js/example_src.js`\r\n\r\n## Installation\r\n\r\n```\r\n$ npm install bindie\r\n```\r\n\r\nBinde is a browserified/commonjs javascript module.\r\n\r\n## Usage\r\n\r\n*JavaScript*\r\n```javascript\r\nvar Bindie = require('bindie'),\r\n\tmyBindie;\r\n\r\nvar updateBindieData = function(){\r\n  bindie1.update({\r\n    data: {\r\n      field1: \"field1 data, probably from database\",\r\n      field2: {\r\n        field2html: \"<h2>field2</h2><p>by default this uses EJS, you can use whatever template language you want</p>\"\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n//initialize nav component after the dom has loaded\r\nwindow.addEventListener('load',function(){\r\n\tvar tabelement = document.getElementById('tabs');\r\n\tmyBindie = new Bindie();\r\n  myBindie.addBinder({\r\n    prop: 'field1',\r\n    elementSelector: '#field1',\r\n    binderType: 'value'\r\n  });\r\n  myBindie.addBinder({\r\n    prop: 'field2',\r\n    elementSelector: '#field2',\r\n    binderType: 'template',\r\n    binderTemplate: document.querySelector('#field2-template').innerHTML\r\n  });\r\n\t//expose your nav component to the window global namespace\r\n\twindow.myBindie = myBindie;\r\n  updateBindieData();\r\n});\r\n```\r\n\r\n*HTML*\r\n```html\r\n<html>\r\n\t<head>\r\n  \t<title>Your Page</title>\r\n  \t<script src='[path/to/browserify/bundle].js'></script>\r\n\t</head>\r\n\t<body>\r\n    <section>\r\n      <label for=\"field1\">Field 1</label>\r\n      <input type=\"text\" value=\"\" name=\"field1\" id=\"field1\" />\r\n    </section>\r\n    <section>\r\n      <label for=\"field2\">Field 2</label>\r\n      <div id=\"field2\"></div>\r\n    </section>\r\n\r\n    <script id=\"field2-template\" type=\"text/template\">\r\n      <div>\r\n          {{- field2html }}\r\n      </div>\r\n    </script>\r\n\t</body>\r\n</html>\r\n```\r\n\r\n##API\r\n\r\n```javascript\r\n//bind UI elements to JSON from AJAX response\r\nmyBindie.update({\r\n  data:responsefromajax\r\n}); \r\n\r\n//bind UI elements to JSON from AJAX response\r\nmyBindie.addBinder({\r\n  elementSelector:responsefromajax,\r\n  binderType: 'value' || 'innerHTML' || 'template',\r\n  binderTemplate: document.querySelector('#templatehtml').innerHTML\r\n}); \r\n\r\n//events\r\nmyBindie.on('addedBinder',callback); // callback(binder)\r\nmyBindie.on('renderedBinder',callback); // callback(data)\r\nmyBindie.on('updatedBindie',callback); // callback(data)\r\n```\r\n##Development\r\n*Make sure you have grunt installed*\r\n```\r\n$ npm install -g grunt-cli\r\n```\r\n\r\nThen run grunt watch\r\n```\r\n$ grunt watch\r\n```\r\n##For generating documentation\r\n```\r\n$ grunt doc\r\n$ jsdoc2md lib/**/*.js index.js > doc/api.md\r\n```\r\n\r\n##Notes\r\n* The Tab Module uses Node's event Emitter for event handling.\r\n* The Template Generator uses EJS, but you can generate your own mark up","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}